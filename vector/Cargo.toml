[package]
name = "vector"
version = "0.34.0"
authors = ["Vector Contributors <vector@datadoghq.com>"]
edition = "2021"
description = "A lightweight and ultra-fast tool for building observability pipelines"
homepage = "https://vector.dev"
license = "MPL-2.0"
readme = "README.md"
publish = false
default-run = "vector"
autobenches = false # our benchmarks are not runnable on their own either way
# Minimum supported rust version
rust-version = "1.71.1"

[[bin]]
name = "vector"
test = false
bench = false

[[test]]
name = "integration"
path = "tests/integration/lib.rs"

[[bin]]
name = "graphql-schema"
path = "src/api/schema/gen.rs"
test = false
bench = false
required-features = ["default-no-api-client"]

[[bin]]
name = "secret-backend-example"
path = "src/config/loading/secret_backend_example.rs"
test = false
bench = false

# CI-based builds use full release optimization.  See scripts/environment/release-flags.sh.
# This results in roughly a 5% reduction in performance when compiling locally vs when
# compiled via the CI pipeline.
[profile.release]
debug = false # Do not include debug symbols in the executable.

[profile.bench]
debug = true

[package.metadata.deb]
name = "vector"
section = "admin"
maintainer-scripts = "distribution/debian/scripts/"
conf-files = ["/etc/vector/vector.yaml", "/etc/default/vector"]
assets = [
  ["target/release/vector", "/usr/bin/", "755"],
  ["config/vector.yaml", "/etc/vector/vector.yaml", "644"],
  ["config/examples/*", "/etc/vector/examples/", "644"],
  ["distribution/systemd/vector.service", "/lib/systemd/system/vector.service", "644"],
  ["distribution/systemd/vector.default", "/etc/default/vector", "600"],
  ["licenses/*", "/usr/share/vector/licenses/", "644"],
  ["NOTICE", "/usr/share/vector/NOTICE", "644"],
  ["LICENSE-3rdparty.csv", "/usr/share/vector/LICENSE-3rdparty.csv", "644"],
]
license-file = ["target/debian-license.txt"]
extended-description-file = "target/debian-extended-description.txt"

[package.metadata.deb.systemd-units]
unit-scripts = "distribution/systemd/"
enable = false
start = false

# libc requirements are defined by `cross`
# https://github.com/rust-embedded/cross#supported-targets
# Though, it seems like aarch64 libc is actually 2.18 and not 2.19
[package.metadata.deb.variants.armv7-unknown-linux-gnueabihf]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-gnu]
depends = "libc6 (>= 2.15)"

[package.metadata.deb.variants.x86_64-unknown-linux-musl]
depends = ""

[package.metadata.deb.variants.aarch64-unknown-linux-gnu]
depends = "libc6 (>= 2.18)"

[package.metadata.deb.variants.aarch64-unknown-linux-musl]
depends = ""

[workspace]
members = [
  ".",
  "lib/codecs",
  "lib/dnsmsg-parser",
  "lib/docs-renderer",
  "lib/enrichment",
  "lib/fakedata",
  "lib/file-source",
  "lib/k8s-e2e-tests",
  "lib/k8s-test-framework",
  "lib/loki-logproto",
  "lib/portpicker",
  "lib/prometheus-parser",
  "lib/opentelemetry-proto",
  "lib/tracing-limit",
  "lib/vector-api-client",
  "lib/vector-buffers",
  "lib/vector-common",
  "lib/vector-config",
  "lib/vector-config-common",
  "lib/vector-config-macros",
  "lib/vector-core",
  "lib/vector-lib",
  "lib/vector-lookup",
  "lib/vector-stream",
  "lib/vector-vrl/cli",
  "lib/vector-vrl/functions",
  "lib/vector-vrl/tests",
  "lib/vector-vrl/web-playground",
  "vdev",
]

[workspace.dependencies]
vrl = { version = "0.8.1", features = ["cli"] }

pin-project = { version = "1.1.3", default-features = false }

[dependencies]
vrl.workspace = true
pin-project.workspace = true

# Internal libs
dnsmsg-parser = { path = "lib/dnsmsg-parser", optional = true }
fakedata = { path = "lib/fakedata", optional = true }
portpicker = { path = "lib/portpicker" }
tracing-limit = { path = "lib/tracing-limit" }
vector-lib = { path = "lib/vector-lib", default-features = false, features = ["vrl"] }
vector-vrl-functions = { path = "lib/vector-vrl/functions" }
loki-logproto = { path = "lib/loki-logproto", optional = true }

# Tokio / Futures
async-stream = { version = "0.3.5", default-features = false }
async-trait = { version = "0.1.74", default-features = false }
futures = { version = "0.3.29", default-features = false, features = ["compat", "io-compat"], package = "futures" }
tokio = { version = "1.33.0", default-features = false, features = ["full"] }
tokio-openssl = { version = "0.6.3", default-features = false }
tokio-stream = { version = "0.1.14", default-features = false, features = ["net", "sync", "time"] }
tokio-util = { version = "0.7", default-features = false, features = ["io", "time"] }
console-subscriber = { version = "0.2.0", default-features = false, optional = true }

# Tracing
tracing = { version = "0.1.34", default-features = false }
tracing-core = { version = "0.1.26", default-features = false }
tracing-futures = { version = "0.2.5", default-features = false, features = ["futures-03"] }
tracing-subscriber = { version = "0.3.17", default-features = false, features = ["ansi", "env-filter", "fmt", "json", "registry", "tracing-log"] }
tracing-tower = { git = "https://github.com/tokio-rs/tracing", default-features = false, rev = "e0642d949891546a3bb7e47080365ee7274f05cd" }

# Metrics
metrics = "0.21.1"
metrics-tracing-context = { version = "0.14.0", default-features = false }

# AWS - Official SDK
# depending on a fork to circumvent https://github.com/awslabs/aws-sdk-rust/issues/749
aws-sdk-s3 = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-sqs = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-sns = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-cloudwatch = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-cloudwatchlogs = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-elasticsearch = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-firehose = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-sdk-kinesis = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-types = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, optional = true }
aws-sigv4 = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["sign-http"], optional = true }
aws-config = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["native-tls"], optional = true }
aws-credential-types = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["hardcoded-credentials"], optional = true }
aws-smithy-async = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, optional = true }
aws-smithy-client = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["client-hyper"], optional = true}
aws-smithy-http = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, features = ["event-stream"], optional = true }
aws-smithy-http-tower = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, optional = true }
aws-smithy-types = { git = "https://github.com/vectordotdev/aws-sdk-rust", rev = "3d6aefb7fcfced5fc2a7e761a87e4ddbda1ee670", default-features = false, optional = true }

# Azure
azure_core = { version = "0.16", default-features = false, features = ["enable_reqwest"], optional = true }
azure_identity = { version = "0.16", default-features = false, features = ["enable_reqwest"], optional = true }
azure_storage = { version = "0.16", default-features = false, optional = true }
azure_storage_blobs = { version = "0.16", default-features = false, optional = true }

# OpenDAL
opendal = {version = "0.38", default-features = false, features = ["native-tls", "services-webhdfs"], optional = true}

# Tower
tower = { version = "0.4.13", default-features = false, features = ["buffer", "limit", "retry", "timeout", "util", "balance", "discover"] }
tower-http = { version = "0.4.4", default-features = false, features = ["decompression-gzip", "trace"]}
# Serde
serde = { version = "1.0.190", default-features = false, features = ["derive"] }
serde-toml-merge = { version = "0.3.3", default-features = false }
serde_bytes = { version = "0.11.12", default-features = false, features = ["std"], optional = true }
serde_json = { version = "1.0.107", default-features = false, features = ["raw_value"] }
serde_with = { version = "3.4.0", default-features = false, features = ["macros", "std"] }
serde_yaml = { version = "0.9.27", default-features = false }

# Messagepack
rmp-serde = { version = "1.1.2", default-features = false, optional = true }
rmpv = { version = "1.0.1", default-features = false, features = ["with-serde"], optional = true }

# Prost / Protocol Buffers
prost = { version = "0.12", default-features = false, features = ["std"] }
prost-reflect = { version = "0.12", default-features = false, optional = true }
prost-types = { version = "0.12", default-features = false, optional = true }

# GCP
goauth = { version = "0.14.0", optional = true }
smpl_jwt = { version = "0.8.0", default-features = false, optional = true }

# AMQP
lapin = { version = "2.3.1", default-features = false, features = ["native-tls"], optional = true }

# API
async-graphql = { version = "6.0.9", default-features = false, optional = true, features = ["chrono", "playground"] }
async-graphql-warp = { version = "6.0.0", default-features = false, optional = true }
itertools = { version = "0.11.0", default-features = false }

# API client
crossterm = { version = "0.27.0", default-features = false, features = ["event-stream", "windows"], optional = true }
num-format = { version = "0.4.4", default-features = false, features = ["with-num-bigint"], optional = true }
number_prefix = { version = "0.4.0", default-features = false, features = ["std"], optional = true }
ratatui = { version = "0.24.0", optional = true, default-features = false, features = ["crossterm"] }

# Datadog Pipelines

hex = { version = "0.4.3", default-features = false, optional = true }
sha2 = { version = "0.10.8", default-features = false, optional = true }

# GreptimeDB
greptimedb-client = { git = "https://github.com/GreptimeTeam/greptimedb-client-rust.git", rev = "bc32362adf0df17a41a95bae4221d6d8f1775656", optional = true }

# External libs
arc-swap = { version = "1.6", default-features = false, optional = true }
async-compression = { version = "0.4.4", default-features = false, features = ["tokio", "gzip", "zstd"], optional = true }
apache-avro = { version = "0.16.0", default-features = false, optional = true }
axum = { version = "0.6.20", default-features = false }
base64 = { version = "0.21.5", default-features = false, optional = true }
bloomy  = { version = "1.2.0", default-features = false, optional = true }
bollard = { version = "0.15.0", default-features = false, features = ["ssl", "chrono"], optional = true }
bytes = { version = "1.5.0", default-features = false, features = ["serde"] }
bytesize = { version = "1.3.0", default-features = false }
chrono = { version = "0.4.31", default-features = false, features = ["serde"] }
cidr-utils = { version = "0.5.11", default-features = false }
clap = { version = "4.4.7", default-features = false, features = ["derive", "error-context", "env", "help", "std", "string", "usage", "wrap_help"] }
colored = { version = "2.0.4", default-features = false }
csv = { version = "1.3", default-features = false }
derivative = { version = "2.2.0", default-features = false }
dirs-next = { version = "2.0.0", default-features = false, optional = true }
dyn-clone = { version = "1.0.14", default-features = false }
encoding_rs = { version = "0.8.33", default-features = false, features = ["serde"] }
enum_dispatch = { version = "0.3.12", default-features = false }
exitcode = { version = "1.1.2", default-features = false }
flate2 = { version = "1.0.28", default-features = false, features = ["default"] }
futures-util = { version = "0.3.29", default-features = false }
glob = { version = "0.3.1", default-features = false }
governor = { version = "0.6.0", default-features = false, features = ["dashmap", "jitter", "std"], optional = true }
grok = { version = "2.0.0", default-features = false, optional = true }
h2 = { version = "0.3.21", default-features = false, optional = true }
hash_hasher = { version = "2.0.0", default-features = false }
hashbrown = { version = "0.14.2", default-features = false, optional = true, features = ["ahash"] }
headers = { version = "0.3.9", default-features = false }
hostname = { version = "0.3.1", default-features = false }
http = { version = "0.2.9", default-features = false }
http-serde = "1.1.3"
http-body = { version = "0.4.5", default-features = false }
hyper = { version = "0.14.27", default-features = false, features = ["client", "runtime", "http1", "http2", "server", "stream"] }
hyper-openssl = { version = "0.9.2", default-features = false }
hyper-proxy = { version = "0.9.1", default-features = false, features = ["openssl-tls"] }
indexmap = { version = "2.1.0", default-features = false, features = ["serde", "std"] }
infer = { version = "0.15.0", default-features = false, optional = true}
indoc = { version = "2.0.4", default-features = false }
inventory = { version = "0.3.13", default-features = false }
k8s-openapi = { version = "0.18.0", default-features = false, features = ["api", "v1_26"], optional = true }
kube = { version = "0.82.0", default-features = false, features = ["client", "openssl-tls", "runtime"], optional = true }
listenfd = { version = "1.0.1", default-features = false, optional = true }
logfmt = { version = "0.0.2", default-features = false, optional = true }
lru = { version = "0.12.0", default-features = false, optional = true }
maxminddb = { version = "0.23.0", default-features = false, optional = true }
md-5 = { version = "0.10", default-features = false, optional = true }
mongodb = { version = "2.7.1", default-features = false, features = ["tokio-runtime"], optional = true }
async-nats = { version = "0.32.1", default-features = false, optional = true }
nkeys = { version = "0.3.1", default-features = false, optional = true }
nom = { version = "7.1.3", default-features = false, optional = true }
notify = { version = "6.1.1", default-features = false, features = ["macos_fsevent"] }
once_cell = { version = "1.18", default-features = false }
openssl = { version = "0.10.58", default-features = false, features = ["vendored"] }
openssl-probe = { version = "0.1.5", default-features = false }
ordered-float = { version = "4.1.1", default-features = false }
paste = "1.0.14"
percent-encoding = { version = "2.3.0", default-features = false }
postgres-openssl = { version = "0.5.0", default-features = false, features = ["runtime"], optional = true }
pulsar = { version = "6.1.0", default-features = false, features = ["tokio-runtime", "auth-oauth2", "flate2", "lz4", "snap", "zstd"], optional = true }
rand = { version = "0.8.5", default-features = false, features = ["small_rng"] }
rand_distr = { version = "0.4.3", default-features = false }
rdkafka = { version = "0.34.0", default-features = false, features = ["tokio", "libz", "ssl", "zstd"], optional = true }
redis = { version = "0.23.3", default-features = false, features = ["connection-manager", "tokio-comp", "tokio-native-tls-comp"], optional = true }
regex = { version = "1.10.2", default-features = false, features = ["std", "perf"] }
roaring = { version = "0.10.2", default-features = false, optional = true }
seahash = { version = "4.1.0", default-features = false }
semver = { version = "1.0.20", default-features = false, features = ["serde", "std"], optional = true }
smallvec = { version = "1", default-features = false, features = ["union", "serde"] }
snafu = { version = "0.7.5", default-features = false, features = ["futures"] }
snap = { version = "1.1.0", default-features = false }
socket2 = { version = "0.5.5", default-features = false }
stream-cancel = { version = "0.8.1", default-features = false }
strip-ansi-escapes = { version = "0.2.0", default-features = false }
syslog = { version = "6.1.0", default-features = false, optional = true }
tikv-jemallocator = { version = "0.5.4", default-features = false, optional = true }
tokio-postgres = { version = "0.7.10", default-features = false, features = ["runtime", "with-chrono-0_4"], optional = true }
tokio-tungstenite = {version = "0.20.1", default-features = false, features = ["connect"], optional = true}
toml = { version = "0.8.6", default-features = false, features = ["parse", "display"] }
tonic = { version = "0.10", optional = true, default-features = false, features = ["transport", "codegen", "prost", "tls", "tls-roots", "gzip"] }
trust-dns-proto = { version = "0.23.2", default-features = false, features = ["dnssec"], optional = true }
typetag = { version = "0.2.13", default-features = false }
url = { version = "2.4.1", default-features = false, features = ["serde"] }
uuid = { version = "1", default-features = false, features = ["serde", "v4"] }
warp = { version = "0.3.6", default-features = false }
zstd = { version = "0.13.0", default-features = false }
arr_macro = { version = "0.2.1" }

# depending on fork for bumped nix dependency
# https://github.com/heim-rs/heim/pull/360
heim = { git = "https://github.com/vectordotdev/heim.git", branch = "update-nix", default-features = false, features = ["disk"] }

# make sure to update the external docs when the Lua version changes
mlua = { version = "0.9.1", default-features = false, features = ["lua54", "send", "vendored", "macros"], optional = true }

[target.'cfg(windows)'.dependencies]
windows-service = "0.6.0"

[target.'cfg(unix)'.dependencies]
nix = { version = "0.26.2", default-features = false, features = ["socket", "signal"] }

[build-dependencies]
prost-build = { version = "0.12", default-features = false, optional = true }
tonic-build = { version = "0.10", default-features = false, features = ["transport", "prost"], optional = true }
# update 'openssl_version' in website/config.toml whenever <major.minor> version changes
openssl-src = { version = "300", default-features = false, features = ["force-engine", "legacy"] }

[dev-dependencies]
approx = "0.5.1"
assert_cmd = { version = "2.0.12", default-features = false }
azure_core = { version = "0.16", default-features = false, features = ["enable_reqwest", "azurite_workaround"] }
azure_identity = { version = "0.16", default-features = false, features = ["enable_reqwest"] }
azure_storage_blobs = { version = "0.16", default-features = false, features = ["azurite_workaround"] }
azure_storage = { version = "0.16", default-features = false }
base64 = "0.21.5"
criterion = { version = "0.5.1", features = ["html_reports", "async_tokio"] }
itertools = { version = "0.11.0", default-features = false, features = ["use_alloc"] }
libc = "0.2.149"
similar-asserts = "1.5.0"
proptest = "1.3"
quickcheck = "1.0.3"
reqwest = { version = "0.11", features = ["json"] }
rstest = {version = "0.18.2"}
tempfile = "3.8.1"
test-generator = "0.3.1"
tokio = { version = "1.33.0", features = ["test-util"] }
tokio-test = "0.4.3"
tower-test = "0.4.0"
vector-lib = { path = "lib/vector-lib", default-features = false, features = ["vrl", "test"] }
vrl = { version = "0.8.1", features = ["cli", "test", "test_framework", "arbitrary"] }

wiremock = "0.5.19"
zstd = { version = "0.13.0", default-features = false }

[patch.crates-io]
# The upgrade for `tokio-util` >= 0.6.9 is blocked on https://github.com/vectordotdev/vector/issues/11257.
tokio-util = { git = "https://github.com/vectordotdev/tokio", branch = "tokio-util-0.7.8-framed-read-continue-on-error" }
nix = { git = "https://github.com/vectordotdev/nix.git", branch = "memfd/gnu/musl" }
# The `heim` crates depend on `ntapi` 0.3.7 on Windows, but that version has an
# unaligned access bug fixed in the following revision.
ntapi = { git = "https://github.com/MSxDOS/ntapi.git", rev = "24fc1e47677fc9f6e38e5f154e6011dc9b270da6" }

[features]
# Default features for *-unknown-linux-gnu and *-apple-darwin
default = ["api", "api-client", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise", "component-validation-runner"]
# Default features for `cargo docs`. The same as `default` but without `rdkafka?/gssapi-vendored` which would require installing libsasl in our doc build environment.
docs = ["api", "api-client", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise", "component-validation-runner"]
# Default features for *-unknown-linux-* which make use of `cmake` for dependencies
default-cmake = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise"]
# Default features for *-pc-windows-msvc
# TODO: Enable SASL https://github.com/vectordotdev/vector/pull/3081#issuecomment-659298042
default-msvc = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "transforms", "enterprise"]
default-musl = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise"]
default-no-api-client = ["api", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise"]
default-no-vrl-cli = ["api", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise"]
tokio-console = ["dep:console-subscriber", "tokio/tracing"]

all-logs = ["sinks-logs", "sources-logs", "sources-dnstap", "transforms-logs"]
all-metrics = ["sinks-metrics", "sources-metrics", "transforms-metrics", "enterprise"]

# Target specific release features.
# The `make` tasks will select this according to the appropriate triple.
# Use this section to turn off or on specific features for specific triples.
target-aarch64-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]
target-aarch64-unknown-linux-musl = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]
target-armv7-unknown-linux-gnueabihf = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]
target-armv7-unknown-linux-musleabihf = ["api", "api-client", "rdkafka?/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "enterprise"]
target-x86_64-unknown-linux-gnu = ["api", "api-client", "rdkafka?/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "rdkafka?/gssapi-vendored", "enterprise"]
target-x86_64-unknown-linux-musl = ["api", "api-client", "rdkafka?/cmake_build", "enrichment-tables", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]
# Does not currently build
target-powerpc64le-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]
# Currently doesn't build due to lack of support for 64-bit atomics
target-powerpc-unknown-linux-gnu = ["api", "api-client", "enrichment-tables", "rdkafka?/cmake_build", "sinks", "sources", "sources-dnstap", "transforms", "unix", "enterprise"]

# Enables features that work only on systems providing `cfg(unix)`
unix = ["tikv-jemallocator", "allocation-tracing"]
allocation-tracing = []

# Enables kubernetes dependencies and shared code. Kubernetes-related sources,
# transforms and sinks should depend on this feature.
kubernetes = ["dep:k8s-openapi", "dep:kube"]

docker = ["dep:bollard", "dep:dirs-next"]

# API
api = [
  "dep:async-graphql",
  "dep:async-graphql-warp",
  "dep:base64",
  "vector-lib/api",
]

# API client
api-client = [
  "dep:crossterm",
  "dep:num-format",
  "dep:number_prefix",
  "dep:ratatui",
  "vector-lib/api",
  "vector-lib/api-client",
]

aws-core = [
  "aws-config",
  "dep:aws-credential-types",
  "dep:aws-sigv4",
  "dep:aws-types",
  "dep:aws-smithy-async",
  "dep:aws-smithy-client",
  "dep:aws-smithy-http",
  "dep:aws-smithy-http-tower",
  "dep:aws-smithy-types",
]

# Anything that requires Protocol Buffers.
protobuf-build = ["dep:tonic-build", "dep:prost-build"]

gcp = ["dep:base64", "dep:goauth", "dep:smpl_jwt"]

# Enrichment Tables
enrichment-tables = ["enrichment-tables-geoip"]
enrichment-tables-geoip = ["dep:maxminddb"]

# Codecs
codecs-syslog = ["vector-lib/syslog"]

# Sources
sources = ["sources-logs", "sources-metrics"]
sources-logs = [
  "sources-amqp",
  "sources-aws_kinesis_firehose",
  "sources-aws_s3",
  "sources-aws_sqs",
  "sources-datadog_agent",
  "sources-demo_logs",
  "sources-docker_logs",
  "sources-exec",
  "sources-file",
  "sources-fluent",
  "sources-gcp_pubsub",
  "sources-heroku_logs",
  "sources-http_server",
  "sources-http_client",
  "sources-internal_logs",
  "sources-journald",
  "sources-kafka",
  "sources-kubernetes_logs",
  "sources-logstash",
  "sources-nats",
  "sources-opentelemetry",
  "sources-file-descriptor",
  "sources-redis",
  "sources-socket",
  "sources-splunk_hec",
  "sources-stdin",
  "sources-syslog",
  "sources-vector",
]
sources-metrics = [
  "sources-apache_metrics",
  "sources-aws_ecs_metrics",
  "sources-eventstoredb_metrics",
  "sources-host_metrics",
  "sources-internal_metrics",
  "sources-mongodb_metrics",
  "sources-nginx_metrics",
  "sources-postgresql_metrics",
  "sources-prometheus",
  "sources-statsd",
  "sources-vector",
]

sources-amqp = ["lapin"]
sources-apache_metrics = []
sources-aws_ecs_metrics = []
sources-aws_kinesis_firehose = ["dep:base64", "dep:infer"]
sources-aws_s3 = ["aws-core", "dep:aws-sdk-sqs", "dep:aws-sdk-s3", "dep:semver", "dep:async-compression", "sources-aws_sqs", "tokio-util/io"]
sources-aws_sqs = ["aws-core", "dep:aws-sdk-sqs"]
sources-datadog_agent = ["sources-utils-http-error", "protobuf-build"]
sources-demo_logs = ["dep:fakedata"]
sources-dnstap = ["dep:base64", "dep:trust-dns-proto", "dep:dnsmsg-parser", "protobuf-build"]
sources-docker_logs = ["docker"]
sources-eventstoredb_metrics = []
sources-exec = []
sources-file = ["vector-lib/file-source"]
sources-file-descriptor = ["tokio-util/io"]
sources-fluent = ["dep:base64", "sources-utils-net-tcp", "tokio-util/net", "dep:rmpv", "dep:rmp-serde", "dep:serde_bytes"]
sources-gcp_pubsub = ["gcp", "dep:h2", "dep:prost-types", "protobuf-build", "dep:tonic"]
sources-heroku_logs = ["sources-utils-http", "sources-utils-http-query", "sources-http_server"]
sources-host_metrics =  ["heim/cpu", "heim/host", "heim/memory", "heim/net"]
sources-http_client = ["sources-utils-http-client"]
sources-http_server = ["sources-utils-http", "sources-utils-http-query"]
sources-internal_logs = []
sources-internal_metrics = []
sources-journald = []
sources-kafka = ["dep:rdkafka"]
sources-kubernetes_logs = ["vector-lib/file-source", "kubernetes", "transforms-reduce"]
sources-logstash = ["sources-utils-net-tcp", "tokio-util/net"]
sources-mongodb_metrics = ["dep:mongodb"]
sources-nats = ["dep:async-nats", "dep:nkeys"]
sources-nginx_metrics = ["dep:nom"]
sources-opentelemetry = ["dep:hex", "vector-lib/opentelemetry", "dep:prost-types", "sources-http_server", "sources-utils-http", "sources-vector"]
sources-postgresql_metrics = ["dep:postgres-openssl", "dep:tokio-postgres"]
sources-prometheus = ["sources-prometheus-scrape", "sources-prometheus-remote-write"]
sources-prometheus-scrape = ["sinks-prometheus", "sources-utils-http-client", "vector-lib/prometheus"]
sources-prometheus-remote-write = ["sinks-prometheus", "sources-utils-http", "vector-lib/prometheus"]
sources-redis= ["dep:redis"]
sources-socket = ["sources-utils-net", "tokio-util/net"]
sources-splunk_hec = ["dep:roaring"]
sources-statsd = ["sources-utils-net", "tokio-util/net"]
sources-stdin = ["tokio-util/io"]
sources-syslog = ["codecs-syslog", "sources-utils-net", "tokio-util/net"]
sources-utils-http = ["sources-utils-http-auth", "sources-utils-http-encoding", "sources-utils-http-error", "sources-utils-http-prelude"]
sources-utils-http-auth = ["sources-utils-http-error"]
sources-utils-http-encoding = ["sources-utils-http-error"]
sources-utils-http-error = []
sources-utils-http-prelude = ["sources-utils-http", "sources-utils-http-auth", "sources-utils-http-encoding", "sources-utils-http-error"]
sources-utils-http-query = []
sources-utils-http-client = ["sources-utils-http", "sources-http_server"]
sources-utils-net = ["sources-utils-net-tcp", "sources-utils-net-udp", "sources-utils-net-unix"]
sources-utils-net-tcp = ["listenfd"]
sources-utils-net-udp = ["listenfd"]
sources-utils-net-unix = []

sources-vector = ["dep:tonic", "protobuf-build"]

# Transforms
transforms = ["transforms-logs", "transforms-metrics"]
transforms-logs = [
  "transforms-aws_ec2_metadata",
  "transforms-dedupe",
  "transforms-filter",
  "transforms-log_to_metric",
  "transforms-lua",
  "transforms-metric_to_log",
  "transforms-pipelines",
  "transforms-reduce",
  "transforms-remap",
  "transforms-route",
  "transforms-sample",
  "transforms-throttle",
]
transforms-metrics = [
  "transforms-aggregate",
  "transforms-filter",
  "transforms-log_to_metric",
  "transforms-lua",
  "transforms-metric_to_log",
  "transforms-pipelines",
  "transforms-remap",
  "transforms-tag_cardinality_limit",
  "transforms-throttle",
]

transforms-aggregate = []
transforms-aws_ec2_metadata = ["dep:arc-swap"]
transforms-dedupe = ["dep:lru"]
transforms-filter = []
transforms-log_to_metric = []
transforms-lua = ["dep:mlua", "vector-lib/lua"]
transforms-metric_to_log = []
transforms-pipelines = ["transforms-filter", "transforms-route"]
transforms-reduce = []
transforms-remap = []
transforms-route = []
transforms-sample = []
transforms-tag_cardinality_limit = ["dep:bloomy", "dep:hashbrown"]
transforms-throttle = ["dep:governor"]

# Sinks
sinks = ["sinks-logs", "sinks-metrics"]
sinks-logs = [
  "sinks-amqp",
  "sinks-appsignal",
  "sinks-aws_cloudwatch_logs",
  "sinks-aws_kinesis_firehose",
  "sinks-aws_kinesis_streams",
  "sinks-aws_s3",
  "sinks-aws_sqs",
  "sinks-aws_sns",
  "sinks-axiom",
  "sinks-azure_blob",
  "sinks-azure_monitor_logs",
  "sinks-blackhole",
  "sinks-chronicle",
  "sinks-clickhouse",
  "sinks-console",
  "sinks-databend",
  "sinks-datadog_events",
  "sinks-datadog_logs",
  "sinks-datadog_traces",
  "sinks-elasticsearch",
  "sinks-file",
  "sinks-gcp",
  "sinks-honeycomb",
  "sinks-http",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-mezmo",
  "sinks-loki",
  "sinks-nats",
  "sinks-new_relic_logs",
  "sinks-new_relic",
  "sinks-papertrail",
  "sinks-pulsar",
  "sinks-redis",
  "sinks-sematext",
  "sinks-socket",
  "sinks-splunk_hec",
  "sinks-vector",
  "sinks-webhdfs",
  "sinks-websocket",
]
sinks-metrics = [
  "sinks-appsignal",
  "sinks-aws_cloudwatch_metrics",
  "sinks-blackhole",
  "sinks-console",
  "sinks-datadog_metrics",
  "sinks-greptimedb",
  "sinks-humio",
  "sinks-influxdb",
  "sinks-kafka",
  "sinks-prometheus",
  "sinks-sematext",
  "sinks-statsd",
  "sinks-vector",
  "sinks-splunk_hec"
]

sinks-amqp = ["lapin"]
sinks-appsignal = []
sinks-aws_cloudwatch_logs = ["aws-core", "dep:aws-sdk-cloudwatchlogs"]
sinks-aws_cloudwatch_metrics = ["aws-core", "dep:aws-sdk-cloudwatch"]
sinks-aws_kinesis_firehose = ["aws-core", "dep:aws-sdk-firehose"]
sinks-aws_kinesis_streams = ["aws-core", "dep:aws-sdk-kinesis"]
sinks-aws_s3 = ["dep:base64", "dep:md-5", "aws-core", "dep:aws-sdk-s3"]
sinks-aws_sqs = ["aws-core", "dep:aws-sdk-sqs"]
sinks-aws_sns = ["aws-core", "dep:aws-sdk-sns"]
sinks-axiom = ["sinks-elasticsearch"]
sinks-azure_blob = ["dep:azure_core", "dep:azure_identity", "dep:azure_storage", "dep:azure_storage_blobs"]
sinks-azure_monitor_logs = []
sinks-blackhole = []
sinks-chronicle = []
sinks-clickhouse = []
sinks-console = []
sinks-databend = []
sinks-datadog_events = []
sinks-datadog_logs = []
sinks-datadog_metrics = ["protobuf-build", "dep:prost-reflect"]
sinks-datadog_traces = ["protobuf-build", "dep:rmpv", "dep:rmp-serde", "dep:serde_bytes"]
sinks-elasticsearch = ["transforms-metric_to_log"]
sinks-file = ["dep:async-compression"]
sinks-gcp = ["dep:base64", "gcp"]
sinks-greptimedb = ["dep:greptimedb-client"]
sinks-honeycomb = []
sinks-http = []
sinks-humio = ["sinks-splunk_hec", "transforms-metric_to_log"]
sinks-influxdb = []
sinks-kafka = ["dep:rdkafka"]
sinks-mezmo = []
sinks-loki = ["loki-logproto"]
sinks-nats = ["dep:async-nats", "dep:nkeys"]
sinks-new_relic_logs = ["sinks-http"]
sinks-new_relic = []
sinks-papertrail = ["dep:syslog"]
sinks-prometheus = ["dep:base64", "vector-lib/prometheus"]
sinks-pulsar = ["dep:apache-avro", "dep:pulsar", "dep:lru"]
sinks-redis = ["dep:redis"]
sinks-sematext = ["sinks-elasticsearch", "sinks-influxdb"]
sinks-socket = ["sinks-utils-udp"]
sinks-splunk_hec = []
sinks-statsd = ["sinks-utils-udp", "tokio-util/net"]
sinks-utils-udp = []
sinks-vector = ["sinks-utils-udp", "dep:tonic", "protobuf-build"]
sinks-websocket = ["dep:tokio-tungstenite"]
sinks-webhdfs = ["dep:opendal"]

# Datadog integration
enterprise = [
  "dep:hex",
  "dep:sha2",
  "sinks-datadog_logs",
  "sinks-datadog_metrics",
  "sources-host_metrics",
  "sources-internal_logs",
  "sources-internal_metrics",
  "transforms-remap",
  "transforms-filter",
]

# Identifies that the build is a nightly build
nightly = []

# Testing-related features
all-integration-tests = [
  "amqp-integration-tests",
  "appsignal-integration-tests",
  "aws-integration-tests",
  "axiom-integration-tests",
  "azure-integration-tests",
  "chronicle-integration-tests",
  "clickhouse-integration-tests",
  "databend-integration-tests",
  "datadog-agent-integration-tests",
  "datadog-logs-integration-tests",
  "datadog-metrics-integration-tests",
  "datadog-traces-integration-tests",
  "docker-logs-integration-tests",
  "es-integration-tests",
  "eventstoredb_metrics-integration-tests",
  "fluent-integration-tests",
  "gcp-cloud-storage-integration-tests",
  "gcp-integration-tests",
  "gcp-pubsub-integration-tests",
  "greptimedb-integration-tests",
  "http-client-integration-tests",
  "humio-integration-tests",
  "influxdb-integration-tests",
  "kafka-integration-tests",
  "logstash-integration-tests",
  "loki-integration-tests",
  "mongodb_metrics-integration-tests",
  "nats-integration-tests",
  "nginx-integration-tests",
  "opentelemetry-integration-tests",
  "postgresql_metrics-integration-tests",
  "prometheus-integration-tests",
  "pulsar-integration-tests",
  "redis-integration-tests",
  "splunk-integration-tests",
  "dnstap-integration-tests",
  "webhdfs-integration-tests",
]

amqp-integration-tests = ["sources-amqp", "sinks-amqp"]
appsignal-integration-tests = ["sinks-appsignal"]

aws-integration-tests = [
  "aws-cloudwatch-logs-integration-tests",
  "aws-cloudwatch-metrics-integration-tests",
  "aws-ec2-metadata-integration-tests",
  "aws-ecs-metrics-integration-tests",
  "aws-kinesis-firehose-integration-tests",
  "aws-kinesis-streams-integration-tests",
  "aws-s3-integration-tests",
  "aws-sqs-integration-tests",
  "aws-sns-integration-tests",
]

azure-integration-tests = [
  "azure-blob-integration-tests"
]

aws-cloudwatch-logs-integration-tests = ["sinks-aws_cloudwatch_logs"]
aws-cloudwatch-metrics-integration-tests = ["sinks-aws_cloudwatch_metrics"]
aws-ec2-metadata-integration-tests = ["transforms-aws_ec2_metadata"]
aws-ecs-metrics-integration-tests = ["sources-aws_ecs_metrics"]
aws-kinesis-firehose-integration-tests = ["sinks-aws_kinesis_firehose", "dep:aws-sdk-elasticsearch", "sinks-elasticsearch"]
aws-kinesis-streams-integration-tests = ["sinks-aws_kinesis_streams"]
aws-s3-integration-tests = ["sinks-aws_s3", "sources-aws_s3"]
aws-sqs-integration-tests = ["sinks-aws_sqs"]
aws-sns-integration-tests = ["sinks-aws_sns"]
axiom-integration-tests = ["sinks-axiom"]
azure-blob-integration-tests = ["sinks-azure_blob"]
chronicle-integration-tests = ["sinks-gcp"]
clickhouse-integration-tests = ["sinks-clickhouse"]
databend-integration-tests = ["sinks-databend"]
datadog-agent-integration-tests = ["sources-datadog_agent"]
datadog-logs-integration-tests = ["sinks-datadog_logs"]
datadog-metrics-integration-tests = ["sinks-datadog_metrics"]
datadog-traces-integration-tests = ["sources-datadog_agent", "sinks-datadog_traces", "axum/tokio"]
docker-logs-integration-tests = ["sources-docker_logs", "unix"]
es-integration-tests = ["sinks-elasticsearch", "aws-core"]
eventstoredb_metrics-integration-tests = ["sources-eventstoredb_metrics"]
fluent-integration-tests = ["docker", "sources-fluent"]
gcp-cloud-storage-integration-tests = ["sinks-gcp"]
gcp-integration-tests = ["sinks-gcp"]
gcp-pubsub-integration-tests = ["sinks-gcp", "sources-gcp_pubsub"]
greptimedb-integration-tests = ["sinks-greptimedb"]
humio-integration-tests = ["sinks-humio"]
http-client-integration-tests = ["sources-http_client"]
influxdb-integration-tests = ["sinks-influxdb"]
kafka-integration-tests = ["sinks-kafka", "sources-kafka"]
logstash-integration-tests = ["docker", "sources-logstash"]
loki-integration-tests = ["sinks-loki"]
mongodb_metrics-integration-tests = ["sources-mongodb_metrics"]
nats-integration-tests = ["sinks-nats", "sources-nats"]
nginx-integration-tests = ["sources-nginx_metrics"]
opentelemetry-integration-tests = ["sources-opentelemetry"]
postgresql_metrics-integration-tests = ["sources-postgresql_metrics"]
prometheus-integration-tests = ["sinks-prometheus", "sources-prometheus", "sinks-influxdb"]
pulsar-integration-tests = ["sinks-pulsar"]
redis-integration-tests = ["sinks-redis", "sources-redis"]
splunk-integration-tests = ["sinks-splunk_hec"]
dnstap-integration-tests = ["sources-dnstap", "dep:bollard"]
webhdfs-integration-tests = ["sinks-webhdfs"]
disable-resolv-conf = []
shutdown-tests = ["api", "sinks-blackhole", "sinks-console", "sinks-prometheus", "sources", "transforms-lua", "transforms-remap", "unix"]
cli-tests = ["sinks-blackhole", "sinks-socket", "sources-demo_logs", "sources-file"]
vector-api-tests = [
  "sources-demo_logs",
  "transforms-log_to_metric",
  "transforms-remap",
  "sinks-blackhole"
]
vector-unit-test-tests = [
  "sources-demo_logs",
  "transforms-remap",
  "transforms-route",
  "transforms-filter",
  "transforms-reduce",
  "sinks-console"
]
enterprise-tests = [
  "enterprise",
  "sources-demo_logs",
  "sinks-blackhole",
  "sinks-loki",
  "api",
]

component-validation-runner = ["dep:tonic", "sources-internal_logs", "sources-internal_metrics", "sources-vector", "sinks-vector"]
component-validation-tests = ["component-validation-runner", "sources", "transforms", "sinks"]

# Grouping together features for benchmarks. We exclude the API client due to it causing the build process to run out
# of memory when those additional dependencies are built in CI.
benches = [
  "sinks-file",
  "sinks-http",
  "sinks-socket",
  "sources-file",
  "sources-socket",
  "sources-syslog",
  "transforms-lua",
  "transforms-sample",
]
dnstap-benches = ["sources-dnstap"]
language-benches = ["sinks-socket", "sources-socket", "transforms-lua", "transforms-remap"]
# Separate benching process for metrics due to the nature of the bootstrap procedures.
statistic-benches = []
remap-benches = ["transforms-remap"]
transform-benches = ["transforms-filter", "transforms-dedupe", "transforms-reduce", "transforms-route"]
codecs-benches = []
loki-benches = ["sinks-loki"]
enrichment-tables-benches = ["enrichment-tables-geoip"]

[[bench]]
name = "default"
harness = false
required-features = ["benches"]

[[bench]]
name = "dnstap"
path = "benches/dnstap/mod.rs"
harness = false
required-features = ["dnstap-benches"]

[[bench]]
name = "remap"
harness = false
required-features = ["remap-benches"]

[[bench]]
name = "enrichment_tables"
harness = false
required-features = ["enrichment-tables-benches"]

[[bench]]
name = "languages"
harness = false
required-features = ["language-benches"]

[[bench]]
name = "loki"
harness = false
required-features = ["loki-benches"]

[[bench]]
name = "distribution_statistic"
harness = false
required-features = ["statistic-benches"]

[[bench]]
name = "transform"
path = "benches/transform/main.rs"
harness = false
test = false
required-features = ["transform-benches"]

[[bench]]
name = "codecs"
path = "benches/codecs/main.rs"
harness = false
required-features = ["codecs-benches"]
